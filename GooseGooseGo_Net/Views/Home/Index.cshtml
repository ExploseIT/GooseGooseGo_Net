

@using GooseGooseGo_Net
@using GooseGooseGo_Net.Services
@using GooseGooseGo_Net.ef

    @{
    ViewData["Title"] = "Home Page";
    mApp _m_App = @Model;
    }

<form id="id_page">
<div class="container text-center">
  <div class="row g-2 align-items-center">
  <div class="col text-start">
    <b>USD/USDT asset count <span class="text-primary" id="span_asset_item_count"></span></b>
  </div>
  <div class="col">
    <b>Date / time <span class="text-primary" id="span_asset_date_time"></span></b>
  </div>

<div class="row g-2 align-items-center">
  <!-- other cols -->
  <div class="col-2">
    <input id="ip_threshold" type="number" step="0.1" value="-13.0"
           class="form-control w-100" />
  </div>
  <!-- other cols -->
            <div class="col-auto">
                <button id="enableSound" class="btn btn-sm btn-primary">Enable sound</button>
            </div>
            <div class="col-2">
                <input id="ip_code" type="text" value="" placeholder="Enter code"
                       class="form-control w-100" />
            </div>
</div>

</div>

</div>
<div class="row">
    <div class="col-12"><b>Kraken Portfolio</b></div>
        <table id="tab_kraken_portfolio" class="col-12">
            <thead>
                <tr>
                    <th>Exchange</th>
                    <th>Qty Held</th>
                    <th>Avg Cost</th>
                    <th>Market Value</th>
                    <th>Unrealised PnL</th>
                    <th>Realised PnL</th>
                    <th>Fees Paid</th>
                </tr>
            </thead>

            <tbody id="tb_kraken_portfolio">
            </tbody>
        </table>
   </div>

<div class="row">
    <div class="col-12"><b>Mexc Portfolio</b></div>
    <table id="tab_mexc_portfolio" class="col-12">
        <thead>
            <tr>
                <th>Asset</th>
                <th>Market value</th>
                <th>Current price</th>
                <th>Buy Qty</th>
                <th>Average cost</th>
                <th>Unrealised PnL</th>
                <th>Fees Paid</th>
            </tr>
        </thead>

        <tbody id="tb_mexc_portfolio">
        </tbody>
    </table>
</div>

<div class="row g-3">
    <div class="col-12 col-lg-6">
        <div class="col-12 fw-bold mb-2">Up Swing</div>
        <div class="table-responsive">
            <table id="tab_aps_up" class="table table-sm mb-0">
                <thead> <tr> <th>Exchange</th> <th>Pair</th> <th>Price</th> <th>% change</th> </tr> </thead>
                <tbody id="tb_aps_up"> </tbody>
            </table>
        </div>
    </div>

    <div class="col-12 col-lg-6">
        <div class="col-12 fw-bold mb-2">Down Swing</div>
        <div class="table-responsive">
            <table id="tab_aps_down" class="table table-sm mb-0">
                <thead> <tr> <th>Exchange</th> <th>Pair</th> <th>Price</th> <th>% change</th> </tr> </thead>
                <tbody id="tb_aps_down"> </tbody>
            </table>
        </div>
    </div>
</div>

</form>

<audio id="alertSound2" preload="auto">
  <source src="data:audio/wav;base64,UklGRiQAAABXQVZFZm10IBAAAAABAAEAESsAACJWAAACABYAZGF0YQAAAAAA" type="audio/wav">
</audio>

<script>

    $(document).ready(function () {
        setUrlBase("@Html.Raw(_m_App.mUrl)");
        doInit();
        pollDataRead(); // Start polling
        

        doLocalLoad("id_page","#id_page");
        
        window.onbeforeunload = function () {
            doLocalSave('id_page','#id_page');
            return null;
        }

        console.log("Home/Index.cshtml loaded");
    });

    function pollDataRead() {
        doDataRead();
        setTimeout(pollDataRead, 20*1000); // Schedule next poll after 10s
    }

        function doInit() {
            // Initialization code here
            doDataRead();
        }


    function doDataRead() {
        let p_aps_up = {
            aspspUpSwing: true,
            aspspMinSwing: 0.010,
            aspspPeriodValue:  5,
            aspspPeriodUnit:  "minute",
            aspspRowCount: 20,
            aspspPeriodOffset:  0
            };
        
        doApiPost(doContinueSwingListUp, p_aps_up, "api/doAssetPercentageSwingList");
    }

    var l_aps_up = null;
    var l_aps_down = null;
    var l_a_info = null;
    var l_kraken_portfolio = null;
    var l_mexc_portfolio = null;
    var kpCountDown = 0;
    var mexcCountDown = 0;
    var MexcCount = 0;

    function doContinueSwingListUp(ret) {
        l_aps_up = ret.data.apiData;
        let p_aps_down = {
            aspspUpSwing: false,
            aspspMinSwing: 0.010,
            aspspPeriodValue:  5,
            aspspPeriodUnit:  "minute",
            aspspRowCount: 20,
            aspspPeriodOffset:  0
            };

        doApiPost(doContinueSwingListDown, p_aps_down, "api/doAssetPercentageSwingList");
    }

    function doContinueSwingListDown(ret) {
        l_aps_down = ret.data.apiData;
        doApiPost(doContinueInfoList, null, "api/doAssetInfoList");
    }
    
    function doContinueInfoList(ret) {
        l_a_info = ret.data.apiData;
        if (kpCountDown > 0) {
            kpCountDown--;
            doContinueKrakenPortfolio(null);
        }
        else {
            doApiPost(doContinueKrakenPortfolio, null, "api/doKrakenReturnPortfolio");
        }
    }

    function doContinueKrakenPortfolio(ret)
    {
        if (ret !== null) {
            if (ret.data.apiSuccess === false) {
                kpCountDown = 2;
            } else {
                l_kraken_portfolio = ret.data.apiData;
            }
        }
        if (mexcCountDown > 0) {
            mexcCountDown--;
            doContinueDisplayLists();
        }
        else {
            doApiPost(doContinueMexcPortfolio, null, "api/doMexcReturnPortfolio");
        }
    }

   function doContinueMexcPortfolio(ret) {
       if (ret !== null) {
           if (ret.data.apiSuccess === false) {
                 mexcCountDown = 2;
           }
           else {
               l_mexc_portfolio = ret.data.apiData;
           }
       }
       doContinueDisplayLists();
   }

    function doContinueDisplayLists() {
        doDisplayAssetListsUpDown();
        doDisplayKrakenPortfolio();
        doDisplayMexcPortfolio();
    }

function doDisplayMexcPortfolio() {
      $("#tb_mexc_portfolio").empty();
      if (l_mexc_portfolio === null) return;

      const dpQty   = decimalsFor('qty');
      const dpPrice = decimalsFor('price');
      const dpValue = decimalsFor('value');
      const dpPnl   = decimalsFor('pnl');

      for (let i = 0; i < l_mexc_portfolio.length; i++) {
        const mp_il = l_mexc_portfolio[i];
        if (!mp_il.items || mp_il.items.length === 0) continue;

        const mp = mp_il.items[0];
        const tr = $("<tr></tr>");

        tr.append($("<td></td>").text(mp.mpolsSymbol));
        tr.append($("<td></td>").text(`${fmt(mp.mpolsMarketValue, dpValue)} USD`));
        tr.append($("<td></td>").text(`${fmt(mp.mpolsCurrentPrice, dpPrice)} USD`));
        tr.append($("<td></td>").text(fmt(mp.mpolsBuyQty, dpQty)));
        tr.append($("<td></td>").text(`${fmt(mp.mpolsBuyAvgCost, dpPrice)} USD`));

        const pnlVal = Number(mp.mpolsUnrealizedPnl) || 0;
        const pnlSpan = $(`<span class="${classifyPnl(pnlVal)}">${fmt(pnlVal, dpPnl)} USD</span>`);
        tr.append($("<td></td>").append(pnlSpan));

        tr.append($("<td></td>").text(`${fmt(mp.mpolsBuyFeesQuote, dpValue)} USD`));

        $("#tb_mexc_portfolio").append(tr);
        MexcCount++;

        // trigger alert if condition met (throttled)
        maybeAlert(mp.mpolsSymbol, pnlVal);
      }
    }

    function doDisplayKrakenPortfolio() {
        $("#tb_kraken_portfolio").empty();
        if (l_kraken_portfolio !== null) {
            for (let i=0;i<l_kraken_portfolio.length;i++) {
                let kp = l_kraken_portfolio[i];
                let tr = $("<tr></tr>");
                    let td_exchange = $("<td></td>").text(kp.kpAsset);
                    let td_qtyheld = $("<td></td>").text(kp.kpQtyHeld);
                    let td_avgcost = $("<td></td>").text(kp.kpAvgCost + " USD");
                    let td_marketvalue = $("<td></td>").text(kp.kpMarketValue + " USD");
                    let td_unrealizedPnl = $("<td></td>").text(kp.kpUnrealizedPnl + " USD");
                    let td_realizedPnl = $("<td></td>").text(kp.kpRealizedPnl + " USD");
                    let td_feespaid = $("<td></td>").text(kp.kpFeesPaid + " USD");
                    tr.append(td_exchange);
                    tr.append(td_qtyheld);
                    tr.append(td_avgcost);
                    tr.append(td_marketvalue);
                    tr.append(td_unrealizedPnl);
                    tr.append(td_realizedPnl);
                    tr.append(td_feespaid);
                    $("#tb_kraken_portfolio").append(tr);
            }
        }
    }

    function doDisplayAssetListsUpDown() {
            if (l_a_info === null || l_a_info.length === 0) return;
            $("#span_asset_item_count").text(l_a_info.length);
            let dt = l_a_info[0].assRetrievedAt;
            let dtStr = dt.replace('T', ' ');
            $("#span_asset_date_time").text(dtStr);
            $("#tb_aps_up").empty();

            if (l_aps_up != null) {
                for (let i = 0; i < l_aps_up.length; i++) {
                    let ap = l_aps_up[i];
                    let tr = $("<tr></tr>");
                    let td_exchange = $("<td></td>").text(ap.asspsExchangeFullName);
                    let td_pair = $("<td></td>").text(ap.asspsPair);
                    let td_price = $("<td></td>").text(ap.asspsEndTrade+ " USD");
                    let td_change = $("<td></td>").text((ap.asspsTradeDiffPercent).toFixed(2) + "%");
                    tr.append(td_exchange);
                    tr.append(td_pair);
                    tr.append(td_price);
                    tr.append(td_change);
                    $("#tb_aps_up").append(tr);
                }
            }

            $("#tb_aps_down").empty();

            if (l_aps_down != null) {
                for (let i = 0; i < l_aps_down.length; i++) {
                    let ap = l_aps_down[i];
                    let tr = $("<tr></tr>");
                    let td_exchange = $("<td></td>").text(ap.asspsExchangeFullName);
                    let td_pair = $("<td></td>").text(ap.asspsPair);
                    let td_price = $("<td></td>").text(ap.asspsEndTrade+ " USD");
                    let td_change = $("<td></td>").text((ap.asspsTradeDiffPercent).toFixed(2) + "%");
                    tr.append(td_exchange);
                    tr.append(td_pair);
                    tr.append(td_price);
                    tr.append(td_change);
                    $("#tb_aps_down").append(tr);
                }
            }
    }

    // decide decimals per breakpoint (tweak to taste)
    function decimalsFor(kind) {
      const w = window.innerWidth;
      // You can vary by "kind": 'qty' | 'price' | 'value' | 'pnl' etc.
      if (kind === 'qty') {
        if (w >= 1200) return 8;
        if (w >= 992)  return 6;
        if (w >= 768)  return 4;
        return 3;
      }
      if (kind === 'price') {
        if (w >= 1200) return 6;
        if (w >= 992)  return 5;
        if (w >= 768)  return 4;
        return 3;
      }
      // value/pnl typically don’t need as many
      if (w >= 1200) return 6;
      if (w >= 992)  return 4;
      if (w >= 768)  return 3;
      return 2;
    }

    // generic formatter
    function fmt(n, dp) {
      const num = Number(n) || 0;
      return new Intl.NumberFormat('en-GB', {
        minimumFractionDigits: 0,
        maximumFractionDigits: dp
      }).format(num);
    }

 function classifyPnl(v) {
  if (v >= 0)          return 'pnl-good';
  if (v >= -5.0)       return 'pnl-warn';  // your requested threshold
  return 'pnl-bad';
}

function fmt(n, dp) {
  const num = Number(n) || 0;
  return new Intl.NumberFormat('en-GB', { maximumFractionDigits: dp }).format(num);
}

// optional: throttle sound per symbol
const lastAlertAt = new Map(); // symbol -> epoch ms
const ALERT_COOLDOWN_MS = 60_000;

function maybeAlert(symbol, pnl) {
      // read, trim, and convert to a JS number
      const raw = String($("#ip_threshold").val() ?? "").trim();

      // allow "1,234.56" style by stripping commas
      const ip_threshold_number = Number(raw.replace(/,/g, ""));

      if (Number.isNaN(ip_threshold_number)) {
        // choose a sensible default if user input is invalid
        console.warn("Invalid threshold; using default -5.0");
        return; // or: const ip_threshold_number = -5.0;
      }
         let symbLower = ("" + symbol).toLowerCase();
         if (symbLower != "usdt" && symbLower != "usdc") {
            if (pnl >= ip_threshold_number) {
            const now = Date.now();
            const last = lastAlertAt.get(symbol) || 0;
            if (now - last > ALERT_COOLDOWN_MS) {
              lastAlertAt.set(symbol, now);
              // play the sound
              const el = document.getElementById('alertSound');
              if (el && el.play) {
                  el.currentTime = 0;
                  el.play().catch(()=>{});
              }
              else if (typeof playBeep === 'function') {
                  try {
                      playBeep();
                  }
                  catch {}
              }
            }
      }
  }
}

let audioReady = false;
let audioCtx;

function ensureAudioReady() {
  if (audioReady) return true;
  if (!audioCtx) audioCtx = new (window.AudioContext || window.webkitAudioContext)();
  // resume context (required on mobile)
  audioCtx.resume();
  // play a 0-length (or very short, very quiet) tone to unlock
  const o = audioCtx.createOscillator();
  const g = audioCtx.createGain();
  g.gain.value = 0.0001;
  o.connect(g); g.connect(audioCtx.destination);
  o.start();
  o.stop(audioCtx.currentTime + 0.02);
  audioReady = true;
  return true;
}

function playBeep(multiplier = 4) {
  if (!audioCtx) audioCtx = new (window.AudioContext || window.webkitAudioContext)();

  const o = audioCtx.createOscillator();
  const g = audioCtx.createGain();
  o.type = 'sine';
  o.frequency.value = 880;

  o.connect(g); g.connect(audioCtx.destination);

  const baseMs = 200;                   // your original 200 ms
  const durMs  = baseMs * multiplier;   // 4x → 800 ms
  const now    = audioCtx.currentTime;
  const durSec = durMs / 1000;

  // simple envelope to remove clicks
  g.gain.setValueAtTime(0.0001, now);
  g.gain.linearRampToValueAtTime(0.04, now + 0.01);          // 10 ms fade in
  g.gain.setValueAtTime(0.04, now + durSec - 0.02);
  g.gain.linearRampToValueAtTime(0.0001, now + durSec);       // 20 ms fade out

  o.start(now);
  o.stop(now + durSec);
}

document.getElementById('enableSound').addEventListener('click', () => {
  ensureAudioReady();
  // optional: hide the button after enabling
  document.getElementById('enableSound').style.display = 'none';
});

// Optional: also unlock on first interaction anywhere
window.addEventListener('pointerdown', () => {
  if (!audioReady) 
  ensureAudioReady();
},{ once:true });



</script>


